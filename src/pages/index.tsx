import React from "react";
import Head from "next/head";
import Image from "next/image";
import axios from "axios";
import { useState, useEffect } from "react";
import { BsSearch } from "react-icons/bs";
import { Spinner } from "../components/Spinner";
import { SEARCH_API_ENDPOINT, WEATHER_API_ENDPOINT } from "./api/api";
import { Weather } from "@/components/Weather";

interface WeatherApiResponse {
  main: {
    temp: number;
    feels_like: number;
    humidity: number;
  };
  weather: {
    main: string;
    icon: string;
  }[];
  wind: {
    speed: number;
  };
  name: string;
}

export default function Home() {
  const [city, setCity] = useState("");
  const [weather, setWeather] = useState<WeatherApiResponse | null>(null);
  const [loading, setLoading] = useState(false);
  const [isFirstRender, setIsFirstRender] = useState(true);

  useEffect(() => {
    if (isFirstRender && !city) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          axios
            .get(SEARCH_API_ENDPOINT(latitude, longitude))
            .then((response) => {
              const cityName = response.data.name;
              setCity(cityName);
              fetchWeather(cityName);
            });
        },
        () => {
          console.error("Não foi possível obter a localização do usuário");
        }
      );
      setIsFirstRender(false);
    }
  }, [isFirstRender, city]);

  const fetchWeather = (city: string) => {
    setLoading(true);
    axios.get(WEATHER_API_ENDPOINT(city)).then((response) => {
      setWeather(response.data);
      setLoading(false);
    });
  };

  return (
    <div>
      <Head>
        <title>Quick Weather - Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="absolute top-0 left-0 right-0 bottom-0 bg-black/40 z-[1]" />
      <Image
        src="https://images.unsplash.com/photo-1601134467661-3d775b999c8b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=2575&q=80"
        layout="fill"
        className="object-cover"
        alt=""
      />
      <div className="relative flex justify-between items-center max-w-[500px] w-full m-auto pt-4 px-4 text-white z-10">
        <form
          onSubmit={(e) => {
            e.preventDefault();
            fetchWeather(city);
          }}
          className="flex justify-between items-center w-full m-auto p-3 bg-transparent border border-gray-300 text-white rounded-2xl"
        >
          <div>
            <input
              value={city}
              onChange={(e) => setCity(e.target.value)}
              className="bg-transparent border-none text-white focus:outline-none text-2xl"
              type="text"
              placeholder="Procure por uma cidade"
            />
          </div>
          <button
            onClick={() => fetchWeather(city)}
            className="focus:outline-none"
          >
            <BsSearch size={20} />
          </button>
        </form>
      </div>
      {loading ? (
        <Spinner />
      ) : (
        weather && weather.main && <Weather data={weather} />
      )}
    </div>
  );
}
